# TRELLIS ML Server for RunPod
FROM runpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04

# Set working directory
WORKDIR /workspace

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    wget \
    curl \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libffi-dev \
    libssl-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY ml_server/requirements_simple.txt ./requirements.txt
RUN pip install --upgrade pip
RUN echo "✅ pip upgraded successfully"
# Install requirements with broken system packages ignored
RUN pip install --no-cache-dir -r requirements.txt --ignore-installed blinker
RUN echo "✅ requirements.txt installed successfully (ignoring system blinker)"

# Install critical dependencies separately
RUN pip install --no-cache-dir easydict==1.10.0
RUN python -c "import easydict; print('✅ easydict installed successfully')"
RUN pip install --no-cache-dir utils3d>=0.1.0
RUN python -c "import utils3d; print('✅ utils3d installed successfully')"

# Install open3d separately (force upgrade to resolve conflicts)
RUN pip install --no-cache-dir --force-reinstall --no-deps open3d==0.17.0
RUN pip install --no-cache-dir --upgrade numpy pillow matplotlib
# plotly/dash now handled in requirements.txt with compatible versions
RUN python -c "import sys; print('Python:', sys.version[:10])"
RUN python -c "import numpy; print('numpy OK:', numpy.__version__)" || echo "numpy FAILED"
RUN python -c "import matplotlib; print('matplotlib OK:', matplotlib.__version__)" || echo "matplotlib FAILED"
RUN python -c "import plotly; print('plotly OK:', plotly.__version__)" || echo "plotly FAILED"
RUN python -c "import dash; print('dash OK:', dash.__version__)" || echo "dash FAILED"
RUN python -c "import pandas; print('pandas OK:', pandas.__version__)" || echo "pandas FAILED"
RUN python -c "import sklearn; print('sklearn OK:', sklearn.__version__)" || echo "sklearn FAILED"
RUN python -c "import addict; print('addict OK:', addict.__version__)" || echo "addict FAILED"
RUN python -c "import utils3d; print('utils3d OK:', utils3d.__version__)" || echo "utils3d FAILED"
RUN python -c "import open3d; print('open3d OK:', open3d.__version__)" || echo "open3d FAILED"

# Clone TRELLIS repository
RUN git clone https://github.com/microsoft/TRELLIS.git /workspace/trellis_source

# Install TRELLIS properly
WORKDIR /workspace/trellis_source
RUN echo "✅ TRELLIS cloned successfully"
RUN ls -la

# Install TRELLIS dependencies if they exist
RUN if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
RUN if [ -f "setup.py" ]; then pip install -e .; fi
RUN if [ -f "pyproject.toml" ]; then pip install -e .; fi

# Add TRELLIS to Python path
RUN echo "export PYTHONPATH=/workspace/trellis_source:$PYTHONPATH" >> ~/.bashrc

# Copy our ML server code (force cache bust v2)
WORKDIR /workspace
RUN echo "Cache bust pandas: $(date +%s)" > /tmp/cachebust_pandas
COPY ml_server/ .

# Set Python path
ENV PYTHONPATH=/workspace:/workspace/trellis_source
ENV CUDA_VISIBLE_DEVICES=0
ENV TORCH_CUDA_ARCH_LIST="6.1 7.0 7.5 8.0 8.6 9.0"

# Expose port for RunPod
EXPOSE 8000

# Start command
CMD ["python", "handler.py"]
