#!/usr/bin/env python3
"""
Hybrid Worker –¥–ª—è 3D Generation
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TRELLIS –∏ EmbodiedGen
"""
import os
import sys
import tempfile
import logging
from typing import Dict, Optional, Any
from PIL import Image
import base64
import io

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ worker'–∞
try:
    from trellis_worker import TrellisWorker
    TRELLIS_AVAILABLE = True
except ImportError:
    TRELLIS_AVAILABLE = False
    print("‚ö†Ô∏è TRELLIS worker not available")

try:
    from embodiedgen_worker import EmbodiedGenWorker
    EMBODIEDGEN_AVAILABLE = True
except ImportError:
    EMBODIEDGEN_AVAILABLE = False
    print("‚ö†Ô∏è EmbodiedGen worker not available")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HybridWorker:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π worker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.device = "cuda" if os.environ.get("CUDA_VISIBLE_DEVICES") else "cpu"
        self.is_initialized = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ worker'—ã
        self.workers = {}
        
        if TRELLIS_AVAILABLE:
            try:
                self.workers['trellis'] = TrellisWorker()
                print("‚úÖ TRELLIS worker initialized")
            except Exception as e:
                print(f"‚ùå Failed to initialize TRELLIS worker: {e}")
        
        if EMBODIEDGEN_AVAILABLE:
            try:
                self.workers['embodiedgen'] = EmbodiedGenWorker()
                print("‚úÖ EmbodiedGen worker initialized")
            except Exception as e:
                print(f"‚ùå Failed to initialize EmbodiedGen worker: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π worker
        self.primary_worker = None
        self.fallback_worker = None
        
        if 'trellis' in self.workers:
            self.primary_worker = 'trellis'
            if 'embodiedgen' in self.workers:
                self.fallback_worker = 'embodiedgen'
        elif 'embodiedgen' in self.workers:
            self.primary_worker = 'embodiedgen'
        
        print(f"üîß HybridWorker initialized on device: {self.device}")
        print(f"üéØ Primary worker: {self.primary_worker}")
        print(f"üîÑ Fallback worker: {self.fallback_worker}")
        
        self.is_initialized = True
    
    def generate_3d(self, image_data: bytes, task_id: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏ —Å fallback"""
        if not self.is_initialized:
            return {"error": "Worker not initialized"}
        
        # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π worker
        if self.primary_worker and self.primary_worker in self.workers:
            try:
                print(f"üöÄ Trying {self.primary_worker} worker...")
                result = self.workers[self.primary_worker].generate_3d(image_data, task_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ mock –ª–∏ —ç—Ç–æ
                if self._is_real_result(result):
                    print(f"‚úÖ {self.primary_worker} worker succeeded with real data")
                    return result
                else:
                    print(f"‚ö†Ô∏è {self.primary_worker} worker returned mock data")
                    
            except Exception as e:
                print(f"‚ùå {self.primary_worker} worker failed: {e}")
        
        # –ü—Ä–æ–±—É–µ–º fallback worker
        if self.fallback_worker and self.fallback_worker in self.workers:
            try:
                print(f"üîÑ Trying fallback {self.fallback_worker} worker...")
                result = self.workers[self.fallback_worker].generate_3d(image_data, task_id)
                
                if self._is_real_result(result):
                    print(f"‚úÖ {self.fallback_worker} worker succeeded with real data")
                    return result
                else:
                    print(f"‚ö†Ô∏è {self.fallback_worker} worker returned mock data")
                    
            except Exception as e:
                print(f"‚ùå {self.fallback_worker} worker failed: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ worker'—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock
        print("üîÑ All workers failed, returning mock data")
        return self._generate_mock_result()
    
    def _is_real_result(self, result: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω—ã–º (–Ω–µ mock)"""
        if not result:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        glb_size = result.get('glb_path_size', 0)
        ply_size = result.get('ply_path_size', 0)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ, —ç—Ç–æ mock
        if glb_size < 1000 or ply_size < 1000:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ base64
        glb_base64 = result.get('glb_path_base64', '')
        if 'mock' in glb_base64.lower():
            return False
        
        return True
    
    def _generate_mock_result(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        mock_glb_data = b"mock_glb_data_for_demo_purposes"
        mock_ply_data = b"""ply
format ascii 1.0
element vertex 4
property float x
property float y
property float z
end_header
0.0 0.0 0.0
1.0 0.0 0.0
0.0 1.0 0.0
0.0 0.0 1.0
"""
        
        glb_base64 = base64.b64encode(mock_glb_data).decode('utf-8')
        ply_base64 = base64.b64encode(mock_ply_data).decode('utf-8')
        
        return {
            'glb_path': '/tmp/mock.glb',
            'glb_path_base64': glb_base64,
            'glb_path_size': len(mock_glb_data),
            'ply_path': '/tmp/mock.ply',
            'ply_path_base64': ply_base64,
            'ply_path_size': len(mock_ply_data)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä worker'–∞
worker = HybridWorker()

def handler(event):
    """RunPod handler –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ worker'–∞"""
    try:
        print(f"üöÄ Starting hybrid 3D generation for task: {event.get('id', 'unknown')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if 'input' in event and 'image' in event['input']:
            image_data = event['input']['image']
            if isinstance(image_data, str):
                # Base64 —Å—Ç—Ä–æ–∫–∞
                image_data = base64.b64decode(image_data)
            elif isinstance(image_data, dict) and 'data' in image_data:
                # Base64 –æ–±—ä–µ–∫—Ç
                image_data = base64.b64decode(image_data['data'])
        else:
            return {"error": "No image data provided"}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3D –º–æ–¥–µ–ª—å
        result = worker.generate_3d(image_data, event.get('id', 'unknown'))
        
        return {
            "result": result,
            "status": "completed",
            "task_id": event.get('id', 'unknown')
        }
        
    except Exception as e:
        print(f"‚ùå Error in handler: {e}")
        return {
            "error": str(e),
            "status": "failed",
            "task_id": event.get('id', 'unknown')
        }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_event = {
        "id": "test_hybrid",
        "input": {
            "image": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
        }
    }
    
    result = handler(test_event)
    print(f"Test result: {result}")
