#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ RunPod worker'–∞ —Å PyTorch —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
"""
import os
import json
import base64
import time
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
RUNPOD_ENDPOINT_ID = os.getenv("RUNPOD_ENDPOINT_ID", "z34poz9n7a9487")

if not RUNPOD_API_KEY:
    print("‚ùå RUNPOD_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

def create_test_image():
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    from PIL import Image, ImageDraw
    import io
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512
    img = Image.new('RGB', (512, 512), color='white')
    draw = ImageDraw.Draw(img)
    
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–∫—Ä—É–≥)
    draw.ellipse([156, 156, 356, 356], fill='red', outline='black', width=3)
    draw.text((200, 400), "Test Object", fill='black')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = io.BytesIO()
    img.save(buffer, format='PNG')
    img_data = buffer.getvalue()
    img_base64 = base64.b64encode(img_data).decode('utf-8')
    
    return img_base64

def test_fixed_worker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π worker"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π RunPod worker...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("üé® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    image_base64 = create_test_image()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    url = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/run"
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "input": {
            "image_data": image_base64,
            "task_id": f"test_fixed_{int(time.time())}"
        }
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {RUNPOD_ENDPOINT_ID}...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! Job ID: {result.get('id')}")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        job_id = result["id"]
        status_url = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/status/{job_id}"
        
        print("‚è≥ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        max_attempts = 30
        attempt = 0
        
        while attempt < max_attempts:
            time.sleep(10)
            attempt += 1
            
            status_response = requests.get(status_url, headers=headers)
            status_response.raise_for_status()
            
            status_data = status_response.json()
            status = status_data.get("status")
            
            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –°—Ç–∞—Ç—É—Å = {status}")
            
            if status == "COMPLETED":
                output = status_data.get("output", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if "error" in output:
                    print(f"‚ùå –û—à–∏–±–∫–∞ worker'–∞: {output['error']}")
                    return False
                
                if "glb_data" in output and "ply_data" in output:
                    print("‚úÖ –£–°–ü–ï–•! Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    print(f"üìè GLB —Ä–∞–∑–º–µ—Ä: {len(output['glb_data'])} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìè PLY —Ä–∞–∑–º–µ—Ä: {len(output['ply_data'])} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ mock –¥–∞–Ω–Ω—ã–µ
                    if output['glb_data'] == "mock_glb_data_for_demo_purposes":
                        print("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω—ã mock –¥–∞–Ω–Ω—ã–µ - TRELLIS –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return False
                    else:
                        print("üéâ –ü–æ–ª—É—á–µ–Ω—ã –†–ï–ê–õ–¨–ù–´–ï 3D –¥–∞–Ω–Ω—ã–µ!")
                        return True
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {output}")
                    return False
                    
            elif status == "FAILED":
                error_msg = status_data.get("error", "Unknown error")
                print(f"‚ùå Job failed: {error_msg}")
                return False
                
            elif status in ["IN_QUEUE", "IN_PROGRESS"]:
                continue
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                
        print("‚è∞ Timeout - job –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ RunPod worker'–∞")
    print("=" * 50)
    
    success = test_fixed_worker()
    
    if success:
        print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! Worker –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        print("\nüíî Worker –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ RunPod –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
