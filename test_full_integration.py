"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Railway + RunPod —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ
"""
import os
import requests
import base64
import json
import time
from pathlib import Path

def test_full_integration():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É: —Ñ–æ—Ç–æ ‚Üí Railway API ‚Üí RunPod ‚Üí 3D –º–æ–¥–µ–ª—å
    """
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ç–æ
    photo_path = "/Users/kikanbig/–ú–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã/Photo_to_3D/–§–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π/4879854.jpg"
    
    # URL Railway API
    railway_urls = [
        "https://web-production-24c39.up.railway.app",
        "https://web-production-4d26.up.railway.app",
        "https://photo-to-3d-production.up.railway.app"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Photo to 3D")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(photo_path):
        print(f"‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
        return
    
    print(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ: {os.path.basename(photo_path)}")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–π URL Railway
    railway_url = None
    for url in railway_urls:
        try:
            response = requests.get(f"{url}/health", timeout=10)
            if response.status_code == 200:
                railway_url = url
                print(f"‚úÖ Railway –Ω–∞–π–¥–µ–Ω: {url}")
                break
        except:
            continue
    
    if not railway_url:
        print("‚ùå Railway API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ Railway Dashboard")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    try:
        with open(photo_path, "rb") as f:
            image_data = f.read()
        
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: {len(image_data)} bytes")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Railway API
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Railway API...")
        
        files = {
            'image': ('photo.jpg', image_data, 'image/jpeg')
        }
        
        response = requests.post(
            f"{railway_url}/api/v1/generate",
            files=files,
            timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç Railway!")
            print(f"üìã Task ID: {result.get('task_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìä Status: {result.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å task_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_id = result.get('task_id')
            if task_id:
                print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                check_task_status(railway_url, task_id)
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Railway API: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_task_status(railway_url: str, task_id: str, max_attempts: int = 60):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Railway
    """
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{railway_url}/api/v1/task/{task_id}")
            if response.status_code == 200:
                result = response.json()
                status = result.get('status', 'unknown')
                
                print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {status}")
                
                if status == 'completed':
                    print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    print(f"üìÅ GLB URL: {result.get('output_glb_url', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Üí {result.get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    return True
                elif status == 'failed':
                    print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
                    print(f"üîç –û—à–∏–±–∫–∞: {result.get('error_message', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
                    return False
                elif status in ['pending', 'processing']:
                    time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                    continue
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                    time.sleep(5)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(5)
    
    print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    return False

if __name__ == "__main__":
    test_full_integration()
