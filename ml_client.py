"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RunPod ML —Å–µ—Ä–≤–µ—Ä—É
"""
import os
import httpx
import asyncio
from typing import Dict, Any, Optional
import base64
import json

class RunPodClient:
    def __init__(self, endpoint_id: str, api_key: str):
        self.endpoint_id = endpoint_id
        self.api_key = api_key
        self.base_url = f"https://api.runpod.ai/v2/{endpoint_id}"
        
    async def generate_3d(self, image_data: bytes, image_format: str = "png") -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–∏
        """
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_b64 = base64.b64encode(image_data).decode('utf-8')
        
        payload = {
            "input": {
                "image_data": image_b64,
                "image_format": image_format,
                "output_format": "glb",
                "quality": "medium"
            }
        }
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        async with httpx.AsyncClient(timeout=300.0) as client:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            response = await client.post(
                f"{self.base_url}/run",
                json=payload,
                headers=headers
            )
            response.raise_for_status()
            result = response.json()
            
            if result["status"] == "IN_QUEUE" or result["status"] == "IN_PROGRESS":
                # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                job_id = result["id"]
                return await self._wait_for_completion(job_id)
            
            return result
    
    async def _wait_for_completion(self, job_id: str, max_wait: int = 300) -> Dict[str, Any]:
        """
        –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
        }
        
        async with httpx.AsyncClient() as client:
            for _ in range(max_wait):
                response = await client.get(
                    f"{self.base_url}/status/{job_id}",
                    headers=headers
                )
                response.raise_for_status()
                result = response.json()
                
                if result["status"] == "COMPLETED":
                    return result
                elif result["status"] == "FAILED":
                    raise Exception(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                await asyncio.sleep(1)
        
        raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_runpod_client():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑ RunPod –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    ENDPOINT_ID = os.getenv("RUNPOD_ENDPOINT_ID", "your-endpoint-id")
    API_KEY = os.getenv("RUNPOD_API_KEY", "your-api-key")
    
    if ENDPOINT_ID == "your-endpoint-id":
        print("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å RUNPOD_ENDPOINT_ID –∏ RUNPOD_API_KEY")
        return
    
    client = RunPodClient(ENDPOINT_ID, API_KEY)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        with open("test_image.jpg", "rb") as f:
            image_data = f.read()
        
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        result = await client.generate_3d(image_data, "jpg")
        
        if result["status"] == "COMPLETED":
            output = result["output"]
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìÅ GLB —Ñ–∞–π–ª: {output.get('glb_url', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"üñºÔ∏è Preview: {output.get('preview_url', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result}")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª test_image.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_runpod_client())
