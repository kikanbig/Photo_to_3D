"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ RunPod (–±–µ–∑ Railway)
"""
import os
import requests
import base64
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_photo_direct():
    """
    –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ RunPod
    """
    # RunPod credentials
    ENDPOINT_ID = "z34poz9n7a9487"
    API_KEY = os.getenv("RUNPOD_API_KEY", "RP-...")
    
    # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    photo_path = "/Users/kikanbig/–ú–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã/Photo_to_3D/–§–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π/4879854.jpg"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ")
    print("=" * 55)
    print(f"üì∏ –§–æ—Ç–æ: {os.path.basename(photo_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if not os.path.exists(photo_path):
        print(f"‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    try:
        with open(photo_path, "rb") as f:
            image_data = f.read()
        
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(image_data):,} bytes")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        image_b64 = base64.b64encode(image_data).decode('utf-8')
        print(f"üìã Base64 –¥–ª–∏–Ω–∞: {len(image_b64):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # Payload –¥–ª—è RunPod
        payload = {
            "input": {
                "image_data": image_b64,
                "image_format": "jpg",
                "task_id": f"photo_test_{int(time.time())}",
                "output_format": "glb"
            }
        }
        
        # Headers
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        
        # URL
        url = f"https://api.runpod.ai/v2/{ENDPOINT_ID}/run"
        
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ RunPod...")
        response = requests.post(url, json=payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç RunPod!")
            print(f"üìã Job ID: {result.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìä Status: {result.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if result.get('status') == 'IN_QUEUE':
                job_id = result['id']
                print("‚è≥ –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏...")
                check_runpod_status(ENDPOINT_ID, job_id, API_KEY)
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ RunPod: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_runpod_status(endpoint_id: str, job_id: str, api_key: str, max_attempts: int = 120):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ RunPod (–¥–æ 2 –º–∏–Ω—É—Ç)
    """
    headers = {"Authorization": f"Bearer {api_key}"}
    status_url = f"https://api.runpod.ai/v2/{endpoint_id}/status/{job_id}"
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(status_url, headers=headers)
            if response.status_code == 200:
                result = response.json()
                status = result.get('status', 'unknown')
                
                print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {status}")
                
                if status == 'COMPLETED':
                    print("üéâ 3D –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
                    output = result.get('output', {})
                    
                    if 'result' in output:
                        res = output['result']
                        print(f"üìÅ GLB —Ñ–∞–π–ª: {res.get('glb_path', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                        print(f"üìÅ PLY —Ñ–∞–π–ª: {res.get('ply_path', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('executionTime', 0)} —Å–µ–∫—É–Ω–¥")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {result.get('delayTime', 0)} –º—Å")
                    return True
                    
                elif status == 'FAILED':
                    print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
                    print(f"üîç –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
                    return False
                
                time.sleep(1)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            time.sleep(2)
    
    print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    return False

if __name__ == "__main__":
    test_photo_direct()
