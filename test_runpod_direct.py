"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RunPod endpoint –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
"""
import requests
import base64
import json
import time

def test_runpod_endpoint():
    """
    –¢–µ—Å—Ç RunPod endpoint –Ω–∞–ø—Ä—è–º—É—é
    """
    # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
    ENDPOINT_ID = "z34poz9n7a9487"  # —Ç–≤–æ–π endpoint ID
    API_KEY = "RP-..."  # –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ RunPod Dashboard
    
    if API_KEY == "RP-...":
        print("‚ùå –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ RunPod Dashboard")
        print("   Settings ‚Üí API Keys ‚Üí Create New Key")
        return
    
    # URL –¥–ª—è RunPod Serverless API
    url = f"https://api.runpod.ai/v2/{ENDPOINT_ID}/run"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    test_image_b64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="  # 1x1 pixel PNG
    
    # Payload –¥–ª—è RunPod
    payload = {
        "input": {
            "image_data": test_image_b64,
            "image_format": "png",
            "output_format": "glb",
            "quality": "medium"
        }
    }
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ RunPod...")
        response = requests.post(url, json=payload, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")
            print(f"üìã Job ID: {result.get('id', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"üìä Status: {result.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if result.get('status') == 'IN_QUEUE':
                print("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
                job_id = result['id']
                check_job_status(job_id, API_KEY)
            elif result.get('status') == 'COMPLETED':
                print("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', {})}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_job_status(job_id: str, api_key: str, max_attempts: int = 10):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ RunPod
    """
    status_url = f"https://api.runpod.ai/v2/{job_id}/status"
    headers = {
        "Authorization": f"Bearer {api_key}",
    }
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(status_url, headers=headers)
            if response.status_code == 200:
                result = response.json()
                status = result.get('status', 'unknown')
                print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {status}")
                
                if status == 'COMPLETED':
                    print("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                    output = result.get('output', {})
                    print(f"üìÅ GLB URL: {output.get('glb_url', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    print(f"üñºÔ∏è Preview: {output.get('preview_url', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    break
                elif status == 'FAILED':
                    print("‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
                    print(f"üîç –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
                    break
                    
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            break

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RunPod endpoint")
    print("=" * 40)
    test_runpod_endpoint()
