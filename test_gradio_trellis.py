#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Gradio API –¥–ª—è TRELLIS
"""
import os
import sys
from gradio_client import Client, handle_file
from PIL import Image
import io
import base64

def test_gradio_trellis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Gradio API –¥–ª—è TRELLIS"""
    print("üöÄ –¢–µ—Å—Ç Gradio API –¥–ª—è TRELLIS")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Gradio API...")
        client = Client("trellis-community/TRELLIS")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("üé® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        img = Image.new('RGB', (512, 512), color='red')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = "/tmp/test_image.png"
        img.save(temp_path)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º preprocess_image
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º preprocess_image...")
        try:
            result = client.predict(
                image=handle_file(temp_path),
                api_name="/preprocess_image"
            )
            print(f"‚úÖ preprocess_image —É—Å–ø–µ—à–Ω–æ: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ preprocess_image: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_and_extract_glb —Å URL
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_and_extract_glb —Å URL...")
        try:
            result = client.predict(
                image=handle_file('https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png'),
                multiimages=[],
                seed=42,
                ss_guidance_strength=7.5,
                ss_sampling_steps=12,
                slat_guidance_strength=3,
                slat_sampling_steps=12,
                multiimage_algo="stochastic",
                mesh_simplify=0.95,
                texture_size=1024,
                api_name="/generate_and_extract_glb"
            )
            print(f"‚úÖ generate_and_extract_glb —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            if len(result) >= 3:
                video_path = result[0]
                glb_path = result[1]
                download_path = result[2]
                
                print(f"üé• –í–∏–¥–µ–æ: {video_path}")
                print(f"üì¶ GLB: {glb_path}")
                print(f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å: {download_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä GLB —Ñ–∞–π–ª–∞
                if os.path.exists(glb_path):
                    size = os.path.getsize(glb_path)
                    print(f"üìè –†–∞–∑–º–µ—Ä GLB: {size} –±–∞–π—Ç")
                    
                    if size > 1000:  # –ë–æ–ª—å—à–µ 1KB
                        print("üéâ –†–ï–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø! –§–∞–π–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π!")
                    else:
                        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ mock –¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π")
                else:
                    print("‚ùå GLB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ generate_and_extract_glb: {e}")
            import traceback
            traceback.print_exc()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.remove(temp_path)
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_gradio_trellis()
