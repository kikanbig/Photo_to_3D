"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GLB —Ñ–∞–π–ª–æ–≤
"""
import os
import requests
import base64
import json
from datetime import datetime

def generate_and_download():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3D –º–æ–¥–µ–ª—å –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç GLB —Ñ–∞–π–ª
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    railway_url = "https://web-production-24c39.up.railway.app"
    photo_path = "/Users/kikanbig/–ú–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã/Photo_to_3D/–§–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π/4879854.jpg"
    output_dir = "/Users/kikanbig/–ú–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã/Photo_to_3D/Generated_Models"
    
    print("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ 3D –º–æ–¥–µ–ª–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if not os.path.exists(photo_path):
        print(f"‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
        return
    
    print(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ: {os.path.basename(photo_path)}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        with open(photo_path, "rb") as f:
            files = {'image': ('photo.jpg', f, 'image/jpeg')}
            
            print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Railway...")
            response = requests.post(
                f"{railway_url}/api/v1/generate",
                files=files,
                timeout=300
            )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            task_id = result.get('task_id', 'unknown')
            execution_time = result.get('execution_time', 0)
            result_data = result.get('result', {}).get('result', {})
            
            print(f"üìã Task ID: {task_id}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {execution_time} —Å–µ–∫—É–Ω–¥")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º GLB —Ñ–∞–π–ª
            if 'glb_path_base64' in result_data:
                glb_base64 = result_data['glb_path_base64']
                glb_size = result_data.get('glb_path_size', 0)
                
                print(f"üìÅ GLB —Ä–∞–∑–º–µ—Ä: {glb_size:,} bytes")
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                glb_data = base64.b64decode(glb_base64)
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                glb_filename = f"model_{timestamp}_{task_id[:8]}.glb"
                glb_path = os.path.join(output_dir, glb_filename)
                
                with open(glb_path, "wb") as f:
                    f.write(glb_data)
                
                print(f"‚úÖ GLB —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {glb_path}")
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º PLY –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'ply_path_base64' in result_data:
                    ply_base64 = result_data['ply_path_base64']
                    ply_size = result_data.get('ply_path_size', 0)
                    
                    print(f"üìÅ PLY —Ä–∞–∑–º–µ—Ä: {ply_size:,} bytes")
                    
                    ply_data = base64.b64decode(ply_base64)
                    ply_filename = f"model_{timestamp}_{task_id[:8]}.ply"
                    ply_path = os.path.join(output_dir, ply_filename)
                    
                    with open(ply_path, "wb") as f:
                        f.write(ply_data)
                    
                    print(f"‚úÖ PLY —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {ply_path}")
                
                print(f"\nüéâ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
                print(f"üì± –û—Ç–∫—Ä–æ–π GLB —Ñ–∞–π–ª –≤ –ª—é–±–æ–º 3D –≤—å—é–≤–µ—Ä–µ!")
                
            else:
                print("‚ùå GLB –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(result, indent=2)}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    generate_and_download()
