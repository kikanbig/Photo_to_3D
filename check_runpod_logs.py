#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ RunPod –¥–ª—è Job ID
"""
import os
import requests
import json

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ RunPod
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
RUNPOD_ENDPOINT_ID = os.getenv("RUNPOD_ENDPOINT_ID")

def check_job_logs(job_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Job'–∞"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –¥–ª—è Job ID: {job_id}")
    
    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Job'–∞
    url = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/status/{job_id}"
    
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å Job'–∞: {data.get('status', 'unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏
        if 'logs' in data:
            logs = data['logs']
            print(f"üìã –õ–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã ({len(logs)} —Å—Ç—Ä–æ–∫):")
            print("=" * 50)
            for log in logs[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                print(log)
            print("=" * 50)
        else:
            print("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'result' in data:
            result = data['result']
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2)}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if not RUNPOD_API_KEY or not RUNPOD_ENDPOINT_ID:
        print("‚ùå RUNPOD_API_KEY –∏ RUNPOD_ENDPOINT_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ Job'–∞
    job_id = "27f37309-7034-4f8a-ac94-dde75a95e40f-e2"
    check_job_logs(job_id)
